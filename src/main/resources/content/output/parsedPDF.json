{
  "text": "***START OF PAGE 1***\nAbstract\nThe purpose of this study is to propose education model using Eclipse ADT with android SDK and App Inventor together\nfor efficient teaching for developing Android application. Android is an operating system for mobile devices, one of the\nmost used in the world today. Android is now used in more devices, including smart phones and more users than any other\nmobile operating system. Android SDK is required to Android app developer, but students are difficult for Android SDK\nbecause Android SDK requires students the prior knowledge of Java programming language and Android SDK class library.\nMIT App Inventor is a web based tool, which allows users with no programming experience to develop mobile apps. The\nAndroid programming education model designed in this study was applied to a course for mobile apps. This model using\nmulti Android development tools have shown to be more efficient compared to education using Android SDK only.\nKeywords: Android Programming Education, Android SDK, App Development Tool, App Inventor\n1. Introduction\nAs operating system of the Android is getting more\nand popular, people are getting more interested in\napplications based on the Android SDK. Now the\nAndroid system in the smart phone market is becom-\ning more and more popular especially. In recent years,\nthere are many applications generated because some\nof the development tools are free owing to the open\nsource1. In general, in order to develop Android apps,\nthere are a few prerequisites that you need to fulfill.\nThose are Java and XML experience, and development\nenvironment such as Eclipse. Therefore students are dif-\nficult for learning Android apps. But MIT App Inventor,\nwhich is an Android app creating tool, provided by\nMIT that turns the app development process into a\nvisual one. App Inventor is great for non-coders and\nbeginners. However, in order to become a professional\napp developer, it is necessary to develop an app using\nAndroid SDK.\n2.  Android App Development\nTools\n2.1 Android SDK\nAndroid is a open source mobile operating system based\non Linux kernel developed by Google of OHA_(Open\nHandset Alliance) to develop Android mobile apps2.\nTo develop Android mobile apps, a set of tools that are\nincluded in the Android SDK are needed. There are the\nAPI libraries and developer tools necessary to build,\ntest, and debug apps for Android in the Android SDK.\nGenerally we use Eclipse IDE with Android SDK, and\nrelated tools for developing Android app. The ADT Bundle\nprovides everything you need to begin developing apps.\nThe essential Android SDK components and a version of\nthe Eclipse IDE with built-in ADT (Android Developer\nTools) are included in the ADT Bundle to streamline your\nAndroid app development3. The ADT Bundle shown in\nFigure 1 is widely used to develop Android mobile apps.\n*Author for correspondence\nIndian Journal of Science and Technology, Vol 8(19), DOI: 10.17485/ijst/2015/v8i19/75984, August 2015\nISSN (Print) : 0974-6846\nISSN (Online) : 0974-5645\nCase Study on Efficient Android Programming\nEducation using Multi Android\nDevelopment Tools\nHwansoo Kang* and Jinhyung Cho\nSchool of Computer Engineering, Dongyang Mirae University, Seoul-152-714, South Korea;\nhskang,cjh@dongyang.ac.kr\n***END OF PAGE 1***\n\n***START OF PAGE 2***\nCase Study on Efficient Android Programming Education using Multi Android Development Tools\nIndian Journal of Science and Technology2 Vol 8 (19) | August 2015 | www.indjst.org\nThe basic steps for developing applications are four\nsteps. Developing applications includes the following four\nsteps4,5:\nSetup: During Setup phase we install and set up our •\ndevelopment environment. We also create AVDs\n(Android Virtual Devices) and connect hardware\ndevices, on which we can install our applications.\nDevelopment: During Development phase we prepare •\nand develop our Android project, which contains all\nof the source code ands resource files for our applica-\ntion.\nTesting and Verifying: During this phase we build our •\nproject into an .apk package, which is installed and\nrunning on the emulator for debugging.\nPublishing: During this phase we prepare and build •\nour application for release and distribute release\nversion of our application to users.\n2.2 MIT App Inventor\nMIT App Inventor is a web-based, a drag-drop visual\ndevelopment environment where people can quickly\ncreate Android mobile apps by plugging together pro-\ngram blocks with a graphical user interface6,7. When\nApp Inventor was announced in July 2009 as an experi-\nmental teaching and learning tool, the developer tool\nwas mainly aimed at giving pupils and students easy\naccess to programming in general and mobile devices in\nparticular. App Inventor that is a visual ‘blocks’ program-\nming language for creating mobile apps, is an developing\nenvironment for developers lacking in programming\nexperience8,9. Its graphical blocks programming is based\non the Massachusetts Institute of Technology’s Scratch\nprogramming environment. App Inventor is a visual tool\nconsisted of the Component Designer and the Blocks\nEditor shown in Figure 210. The Component Designer of\nApp Inventor designs the App’s user interface by arrang-\ning both on and off-screen components. The Blocks Editor\nof App Inventor programs the app’s behavior by putting\nblocks together11,12.\n3.  Android Programming\nEducation using Android SDK\nand App Inventor\n3.1 Android SDK Sample Project\nWe show one sample project for efficient Android\nprogramming education using Android SDK and\nApp Inventor. This project is sending string data to\nanother activity. Figure 3 is screenshots of the sample\nproject.\nFigure 1. Screen of ADT Bundle development\nenvironment.\nFigure 2. Screen designs of two activities.\nFigure 3. Screen designs of two activities (a) Screen\ndesign of main activity and (b) Screen design of another\nactivity.\n(a) (b)\n***END OF PAGE 2***\n\n***START OF PAGE 3***\nHwansoo Kang and Jinhyung Cho\nIndian Journal of Science and Technology 3Vol 8 (19) | August 2015 | www.indjst.org\nSkills needed for this project are intent and event\nhandling. When a user interacts with components, events\nare occurred. Event handling is a useful procedure to\nprocess the event. We use the layout xml file to specify\nthe event handler method send Message via the android:\non Click attribute for click event and implement event\nmethod send Message () in activity source file. Figure 4 is\nthe content of the UI xml and activity source file. Intent is\nresponsible for communications between two activities in\nthe Android system. Among four components, which are\nactivity, broadcast receiver, service and content provider,\nmessages and data are transmitted via intent.\nWe can receive the Intent of our activity by calling\nget Intent() and access the data belonged to it. In another\nactivity, classes on Create () method of Figure 5, get the\nintent and extract the message delivered by main activity\nby calling get String Extra().\n3.2 App Inventor Sample Project\nDevelopment app to the above functions using App\nInventor makes it easier to understand skills effec-\ntively. The basic elements for creating Android apps are\ncomponents in the App Inventor. We need to click a\ncomponent and drag it onto the viewer in appropriate\nposition in the Designer for organizing a component in\nour Android app. The project is composed of two screens.\nFigure 6 show the screens of App Inventor for this project.\nThe first screen ‘Screen1’ is composed of a Text Box\nand Button, the second screen ‘Screen2’ is only composed\nof a Label. On the User Interface palette, we drag and\ndrop the Text Box and Button component to the Viewer,\nplacing the min ‘Send a Message to Another Activity’\nscreen to configure the Screen1. Likewise we drag and\ndrop the Label component to the Viewer, placing it in\n‘Display a Message’ screen to configure the Screen2. So\nfar we have been disposing our app’s screens and compo-\nnents in the Designer, which is running in a web browser.\nTo start the behavior of the app programming, we need\nto edit in the Blocks Editor. On the left side of the Blocks\nEditor, we click the Button1 of user interface to open it.\nWe drag the Button1.Click block in the work area and\ndrop it on the open area on the right. The event han-\ndler of blocks describes how the phone should respond\nto specific events. For example, if Button1 is pressed,\n‘when Button1.Click’ is an event handler. To implement\nthe event handler, appropriate blocks must be inserted\ninto the block of ‘When Button1.Click’. Control Block\nof ‘open another screen with start value screens Name\nand start Value’ is inserted into the block of ‘When\nButton1.Click’. Also we insert ‘Screen2’ Text Block into\nscreen Name, and ‘TextBox1.Text’ Block of Component\nTextBox1 into start Value. The yellow block is called\nFigure 5. Source code for receiving data.\nFigure 4. Source code for start an activity.\nFigure 6. Screen designs of two activities (a) Screen1: Send\na Message to Another Activity and (b) Screen2: Display a\nMessage.\n***END OF PAGE 3***\n\n***START OF PAGE 4***\nCase Study on Efficient Android Programming Education using Multi Android Development Tools\nIndian Journal of Science and Technology4 Vol 8 (19) | August 2015 | www.indjst.org\na control block, which is placed in the body of event\nhandlers of ‘When Button1.Click’. As Blocks shown in\nthe screen1, to set text with a start value into Label 1 in\nthe screen2, a Block of ‘set Lable1.Text’ set ‘get start value’\ninserted into the block of ‘When Screen2. Initialize’.\nFigure 7 shows blocks program for button click event\nand displaying the received data.\n4.  Application of the Model to a\nCourse\nThe Android programming education model designed\nin this study was applied to a course opened in the sec-\nond semester of 2013. The title of this course was ‘Mobile\nProgramming’ for android programming. This course had\n3 hours per week and was focusing on the practical android\nprogramming exercises using in parallel with traditional\nAndroid SDK of Eclipse ADT (Android Development\nTool) Bundle and MIT App Inventor. Table 1 describes the\nproposed course syllabus for Android app programming.\nThe first week and second week of this course, we intro-\nduced the syllabus and Android OS, Android SDK. At the\nthird week, we introduced App Inventor and learned app\nprogramming with App Inventor. In 4-13 weeks, we were\nlearning in app programming using App Inventor and\nAndroid SDK in parallel. At the end the 14th week of the\ncourse, term project presentation was held for Capstone\nDesign team projects of Android app planned, designed\nand developed by students themselves. At first, this proj-\nect was developed using App Inventor and then must be\nre-built using the Android SDK. According to the course\nevaluation result, this model using multi android devel-\nopment tools has shown to be more efficient compared to\neducation using Android SDK only.\n5. Conclusion\nGenerally we develop Android app using Eclipse IDE\nwith Android SDK. But it is difficult for beginner stu-\ndents to learn app programming. We like developing\nAndroid apps with Eclipse better because the develop-\ning tools, which you need while developing applications,\ncan be directly invoked by it. Also we need Android SDK\nin order to be an expert in app programming. Therefore\nteaching app programming using Android SDK is indis-\npensable for students. Finally we select the App Inventor\nto complement to teach app programming using Android\nSDK. We show that blocks programming edits will be\nmore manageable and informative than the low-level\nnature of keystroke edits used in learning for Android app\nprogramming. Education of Android app development is\neasy for beginners of Android app development, if the\nFigure 7. Blocks for two activities (a) Blocks programming\nfor start an activity and (b) Blocks programming for receiving\ndata.\nTable 1. Course syllabus\nWeek Android Projects Tools\n Overview of the Course\n  Overview of the Android OS\nand Android programming\nAndroid  SDK\n  Installation Development\nEnvironments, Android SDK\n  Hello World programming\nexercise\nAndroid SDK\n Overview of the App Inventor\n  Overview of Designer and\nBlocks Editor of App Inventor\n  Hello World and Hello Kitty\nprogramming exercises\nApp  Inventor\n Activity, View and Layout\n  List View, Spinner and Date\nPicker\nAndroid SDK\n Event Handling of SDK\n  Event Handling of Blocks\nprogramming of App Inventor\nAndroid SDK\nApp Inventor\n08 Mid Test\n Activity Lifecycle\n Data Transmission\nAndroid SDK\nApp Inventor\n Internet, Socket and Parsing\n SQ Lite Database Processing\nAndroid SDK\nApp Inventor\n14  Final Presentations Android  SDK\nApp  Inventor\n15 Final Test\n***END OF PAGE 4***\n\n***START OF PAGE 5***\nHwansoo Kang and Jinhyung Cho\nIndian Journal of Science and Technology 5Vol 8 (19) | August 2015 | www.indjst.org\nconceptual understanding for Android app development\nis preceded in education of Android app development.\nHowever it is difficult for beginners of Android to learn\nvarious development concepts for Android app develop-\nment directly, in Android app education of using only the\nAndroid SDK. It is very effective for App development\neducation to learn simple objects, components, and event\nhandling, etc while developing App simply using App\nInventor before developing App using Android SDK. It\nis more effective for beginner students to learn Android\napp development using the Android SDK after devel-\noping Android app using App Inventor than education\nusing only the Android SDK. In addition, this efficient\nAndroid programming education is checked by the qual-\nitative interviews of students in lecture of Android app\nprogramming course in 2013. The Android program-\nming education model designed in this study, using multi\nAndroid development tools have shown to be more effi-\ncient compared to education using Android SDK only.\n6. Acknowledgement\nThis study has been supported by 2014 Academic\nResearch Project funded by Dongyang Mirae University\nin the Republic of Korea.\n7. References\n1. Ma L, Gu L, Wang J. Research and development of\nmobile application for android platform. International\nJournal of Multimedia and Ubiquitous Engineering. 2014;\n2. Pandey G, Dani D. Android Mobile Application Build on\nEclipse. International Journal of Scientific and Research\nPublications. 2014; 4(2):1–2.\n3. Android Developers Home Page, Android SDK develop\ntools download. 2014. Available from: http://developer.\nandroid.com/sdk/index.html\n4. Android Developers Home Page, Android SDK develop\ntools workflow. 2014. Available from: http://developer.\nandroid.com/tools/workflow/index.html\n5. Wasserman AI. Software engineering issues for mobile\napplication development. Proceedings of the FSE/SDP\nworkshop on Future of Software Engineering Research\n6. Kim B. Computer programming education using app inven-\ntor for android. Journal of the Korea Institute of Information\nand Communication Engineering. 2013; 17(2):467–72.\n7. Cho E–S, Kim C–J, Lee S–H. A modeling technique for\ndevelopment of mobile app. based on android. Journal of\nthe Korea Academia-Industrial cooperation Society. 2013:\n8. Park J. A study on the effect of app inventor in introductory\nandroid programming course. Proceedings of Korea Society\nof Computer Information Summer Conference 2013. 2013;\n9. Wolber D. App inventor and real-world motivation.\n42nd ACM Technical Symposium on Computer Science\nEducation (SIGCSE’ 11); 2011. p. 601–6.\n10. Kloss JH. Android apps with app inventor: The fast and\neasy way to build android apps. Addison-Wesley; 2012.\n11. Getting Started with MIT App Inventor 2. 2013. Available\nfrom: http://appinventor.mit.edu/explore/get-started.html\n12. Park J–Y, Park S–M. Android app development system\nusing modular method. Journal of Korea Multimedia\n***END OF PAGE 5***\n\n"
}